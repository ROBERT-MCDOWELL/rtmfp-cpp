@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rtmfp: <http://zenomt.com/ns/rtmfp#> .

<> owl:sameAs <http://zenomt.com/ns/rtmfp> .

rtmfp:Metadata a rdfs:Class;
    rdfs:comment "The class of RTMFP Flow User Metadata types." .

<http://zenomt.com/ns/rtmfp#media> a rtmfp:Metadata;
    rdfs:comment """User Metadata type and signature for flows for general-purpose real-time media streams.

metadata format: 'http://zenomt.com/ns/rtmfp#media' <00> [options...]
  options:
    1d stream id: <vlu> (required)
    4c codec: <utf-8 ...> (required, usually fourcc+, see RFC 6381 & https://mp4ra.org/#/codecs, WebCodecs registry, etc.)
    44 media type: <utf-8 ...> (recommended, ex. 'audio', 'video', 'text', 'application', 'message', 'image', ...)
    00 time origin: <128-bit NTPv4 timestamp> (default 0, era must be non-negative)
    01 timescale: <vlu ticks> <vlu per-seconds> (default 1000/1s, both must be nonzero)
    0a receive intent = network arrival order (if not present, intent = original queuing order)
    0b suggested reorder buffer duration <vlu ticks> (default no recommendation)
    21 track name: <utf-8 ...> (default none/auto, should be short <= 64 bytes, in track's primary language)
    2d track id: <vlu> (default 0, per media type)
         note: without separate program info, primary/default track is lowest id per media type
         note: changes to a track: keep track id in new flow, use flow sync to order end/begin.

  example: 'http://zenomt.com/ns/rtmfp#media' 00   02 1d 01   05 4c 61 76 63 31   05 01 85 bf 10 01   06 44 76 69 64 65 6f
    (stream ID 1, codec 'avc1', timescale 90000/1, type 'video', other params default)

  example: 'http://zenomt.com/ns/rtmfp#media' 00   02 1d 01   0a 4c 50 43 4d 55 2f 38 30 30 30   06 44 61 75 64 69 6f
    (stream ID 1, codec 'PCMU/8000', type 'audio', other params default ex. timescale 1000/1)

message format:

 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|R|O| T |       |
|A|P| S |msgType|
|I|T| S |       |
+-+-+-+-+-+-+-+-+
+~~~~~~~~~~~~~/~+~~~~~~~~~~~~~/~+
|     dts     | |  pts offset | |
+~~~~~~~~~~~~~/~+~~~~~~~~~~~~~/~+
+~~~/~~~/~~~~~~~+               +~~~/~~~/~~~~~~~+-------------/-+
| L | T |   V   |... options ...| L | T |   V   |       0     | |
+~~~/~~~/~~~~~~~+   [if(OPT)]   +~~~/~~~/~~~~~~~+-------------/-+
+---------------------------------------------------------------+
|                            payload                            |
+---------------------------------------------------------------/

struct mediaMessage_t
{
    bool_t  randomAccessIndicator :1; // RAI
    bool_t  optionsPresent        :1; // OPT
    uintn_t timestampSelect       :2; // TSS
    uintn_t messageType           :4; // msgType

    if(timestampSelect > 0)
    {
        vlu_t dts :variable*8;
        if(timestampSelect > 1)
            vlu_t offset :variable*8;
        else
            offset = 0;
        if(3 == timestampSelect)
            pts = dts - offset;
        else
            pts = dts + offset;
    }
    else
        dts = pts = 0;

    // Note: pts and dts are timescale ticks since the time origin.

    if(optionsPresent)
        optionList_t options :variable*8;

    uint8_t payload[remainder()];
} :flowMessageLength*8;

  timestamp-select:
    0 dts = pts = 0
    1 <vlu dts> (pts = dts)
    2 <vlu dts> <vlu offset> (pts = dts + offset)
    3 <vlu dts> <vlu offset> (pts = dts - offset)

  message-type:
    0 padding (ignore, delimiter, flow checkpoint)
    1 complete coded media presentation unit in payload
    2 partial (segmented) coded media presentation unit portion in payload (empty payload terminates unit)
    5 media random access checkpoint (ex. "I just sent an IDR") (no payload, timestamp(s) required, dts/pts same as random access media unit)
    6 media alignment checkpoint (ex. "I just sent a non-IDR", possibly useful for long GOPs or segmented frames, timestamp(s) required)
    7 silence/temporary EOS (no payload, timestamp required)
  (8-f non-discardable/must-not-abandon)
    8 reserved
    9 sticky codec-specific sequence header/config (ex. AVCC, AudioSpecificConfig) in payload
    a sticky instantaneous codec metadata refresh (ex. HDR info) in options and/or payload
    f flow sync (payload <vlu syncid> <vlu count>)

  options:
    TBD (for example like RTP extension headers, see RFC 8285, https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-10 )
    To be standardized: frame markings for first/last presentation unit portions, temporal and spatial scalable coding info, HDR info

  segmenting coded presentation units: Some codecs (ex. AVC) can naturally segment a coded
    presentation unit (ex. by slices or category-based slice data partitioning). Segmented
    presentation units MAY be spread across multiple Partial Coded Media messages (type 2,
    all having the same DTS & PTS), to enable differentiated delivery control per segment.
    A segment MUST NOT span messages, but a message MAY contain more than one segment. A
    random-access presentation unit has the RAI flag set only on its first message. A type
    2 message with an empty payload, a message with a different timestamp, or a non-type-2
    message indicates completion of the segmented presentation unit.
""" .

<http://zenomt.com/ns/rtmfp#redirector> a rtmfp:Metadata;
    rdfs:comment """User Metadata type and signature for Redirector command flows.

Client opens an unassociated flow to the Redirector and sends commands. On successful
connection (including authorization if required), Redirector opens an associated return flow
to the Client and sends commands.

metadata format: 'http://zenomt.com/ns/rtmfp#redirector' [<00> options...]
  options: none

message format: <uint8_t command> [payload...]

commands (to redirector):
  1d simple auth: <uint8_t[32] HMAC-SHA256(password, redirector's near nonce)> <keyid...>
     (similar to Section 4.3.5.1.1 of RFC 7425, can be sent multiple times before other commands for different keyids)
     (unrecognized keyid: no-op; recognized keyid but wrong password, or no auth given but required: reject flow reason 0x0a)
  05 settings/register: [options...]
    options:
      0d include derived/reflexive address (default don't)
      0a additional address: <addr> (zero or more times enumerates all additional addresses)
    (no derived and no additional means no redirect, new settings command overrides previous)
  00 draining/unregister (re-register by sending a new settings)
  0f load factor: <vlu> (higher is more loaded, lower might get more connections. ex: number of connections)
  10 user data: [opaque...] (application-specific opaque user data)

commands (from redirector):
  0d derived/reflexive address report: <addr> (resent on detected change)
  10 user data: [opaque...] (application-specific opaque user data)

""".
