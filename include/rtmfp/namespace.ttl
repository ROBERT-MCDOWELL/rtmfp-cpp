@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rtmfp: <http://zenomt.com/ns/rtmfp#> .

<> owl:sameAs <http://zenomt.com/ns/rtmfp> .

rtmfp:Metadata a rdfs:Class;
    rdfs:comment "The class of RTMFP Flow User Metadata types." .

<http://zenomt.com/ns/rtmfp#media> a rtmfp:Metadata;
    rdfs:comment """User Metadata type and signature for flows for general-purpose real-time media streams.

metadata format: 'http://zenomt.com/ns/rtmfp#media' <00> [options...]
  options:
    1d stream id: <vlu> (required)
    4c codec: <utf-8 ...> (required, usually fourcc, more as needed, see RFC 6381 & https://mp4ra.org/#/codecs)
    00 time origin: <128-bit NTPv4 timestamp> (default 0, era must be non-negative)
    01 timescale: <vlu ticks> <vlu per-seconds> (default 1000/1s, both must be nonzero)
    0a receive intent = network arrival order (if not present, intent = original queuing order)
    0b suggested reorder buffer duration <vlu ticks> (default no recommendation)
    21 track name: <utf-8 ...> (default none/auto, should be short <= 64 bytes, in track's primary language)
    2d track id: <vlu> (default none (inferred by codec type), required if more than one concurrent track per A or V type)
         note: without separate program info, primary/default track is lowest id per A or V type.
         note: changes to a track: keep track id in new flow, use flow sync to order end/begin.

  example: 'http://zenomt.com/ns/rtmfp#media' 00   02 1d 01   05 4c 61 76 63 31   05 01 85 bf 10 01
    (stream ID 1, codec 'avc1', timescale 90000/1, other params default)

message format:

 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|R|O| T |       |
|A|P| S |msgType|
|I|T| S |       |
+-+-+-+-+-+-+-+-+
+~~~~~~~~~~~~~/~+~~~~~~~~~~~~~/~+
|     dts     | |  pts offset | |
+~~~~~~~~~~~~~/~+~~~~~~~~~~~~~/~+
+~~~/~~~/~~~~~~~+               +~~~/~~~/~~~~~~~+-------------/-+
| L | T |   V   |... options ...| L | T |   V   |       0     | |
+~~~/~~~/~~~~~~~+   [if(OPT)]   +~~~/~~~/~~~~~~~+-------------/-+
+---------------------------------------------------------------+
|                            payload                            |
+---------------------------------------------------------------/

struct mediaMessage_t
{
    bool_t  randomAccessIndicator :1; // RAI
    bool_t  optionsPresent        :1; // OPT
    uintn_t timestampSelect       :2; // TSS
    uintn_t messageType           :4; // msgType

    if(timestampSelect > 0)
    {
        vlu_t dts :variable*8;
        if(timestampSelect > 1)
            vlu_t offset :variable*8;
        else
            offset = 0;
        if(3 == timestampSelect)
            pts = dts - offset;
        else
            pts = dts + offset;
    }
    else
        dts = pts = 0;

    // Note: pts and dts are timescale ticks since the time origin.

    if(optionsPresent)
        optionList_t options :variable*8;

    uint8_t payload[remainder()];
} :flowMessageLength*8;

  timestamp-select:
    0 dts = pts = 0
    1 <vlu dts> (pts = dts)
    2 <vlu dts> <vlu offset> (pts = dts + offset)
    3 <vlu dts> <vlu offset> (pts = dts - offset)

  message-type:
    0 reserved/forbidden
    1 coded media in payload
    5 media random access checkpoint (ex. "i just sent an IDR") (no payload, timestamp(s) required, dts/pts same as random access media unit)
    6 media alignment checkpoint (ex. "i just sent a non-IDR", possibly useful for long GOPs, timestamp(s) required)
    7 silence/temporary EOS (no payload, timestamp required)
  (8-f non-discardable/must-not-abandon)
    8 reserved/forbidden
    9 sticky codec-specific sequence header/config in payload (ex. AVCC, AudioSpecificConfig)
    f flow sync (payload <vlu syncid> <vlu count>)

  options:
    TBD (example: like RTP extension headers, see RFC 8285, https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-10 )
""" .
